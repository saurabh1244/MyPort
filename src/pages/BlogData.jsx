// BlogData.jsx
export const blogData = [
  {
    id: 1,
    title: "Getting Started with React Hooks",
    intro: "React Hooks revolutionized how we write React components by allowing us to use state and other React features without writing a class. In this post, we'll explore the basics of Hooks and how they can simplify your code.",
    content: "React Hooks revolutionized how we write React components by allowing us to use state and other React features without writing a class. In this post, we'll explore the basics of Hooks and how they can simplify your code.\n\nHooks were introduced in React 16.8 and have since become a fundamental part of modern React development. They let you use state and other React features without writing a class.\n\nThe most commonly used hooks are:\n\n1. useState: Allows you to add state to functional components.\n2. useEffect: Lets you perform side effects in functional components.\n3. useContext: Allows you to consume context in functional components.\n4. useReducer: An alternative to useState for managing complex state logic.\n\nLet's look at a simple example of useState:\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nThis simple counter demonstrates how useState works. We initialize our state with 0 and provide a function to update it.\n\nThe useEffect hook is another powerful tool. It lets you perform side effects in function components:\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nIn this example, useEffect updates the document title whenever the count changes.\n\nHooks have made React development more intuitive and functional. They encourage smaller, more focused components and make it easier to reuse stateful logic between components.\n\nAs you continue your React journey, mastering Hooks will be essential. They represent the future of React development and understanding them well will make you a more effective React developer.",
    author: "Saurabh Sharma",
    date: "May 15, 2023",
    category: "React",
    readTime: "8 min read",
    image: "https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "Senior React Developer with 7+ years of experience building scalable web applications. Passionate about teaching and contributing to open-source projects.",
    tags: ["React", "JavaScript", "Web Development", "Frontend"],
    comments: 24,
    likes: 156
  },
  {
    id: 2,
    title: "Building Responsive Layouts with Tailwind CSS",
    intro: "Tailwind CSS has changed the way we approach styling in web development. This utility-first CSS framework gives you all the building blocks you need to build bespoke designs without writing any custom CSS.",
    content: "Tailwind CSS has changed the way we approach styling in web development. This utility-first CSS framework gives you all the building blocks you need to build bespoke designs without writing any custom CSS.\n\nUnlike traditional CSS frameworks like Bootstrap or Foundation, Tailwind doesn't come with predefined components. Instead, it provides low-level utility classes that let you build completely custom designs without ever leaving your HTML.\n\nHere are some key benefits of using Tailwind CSS:\n\n1. **Rapid Development**: With Tailwind, you can style elements directly in your markup without switching between files.\n2. **Consistency**: Utility classes enforce design consistency across your project.\n3. **Customization**: Tailwind is highly customizable. You can configure the design system to match your brand.\n4. **Performance**: Tailwind removes unused styles in production, resulting in smaller CSS files.\n\nLet's look at a simple example of a responsive card built with Tailwind:\n\n```jsx\n<div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl\">\n  <div className=\"md:flex\">\n    <div className=\"md:shrink-0\">\n      <img className=\"h-48 w-full object-cover md:w-48\" src=\"/img/building.jpg\" alt=\"Modern building architecture\" />\n    </div>\n    <div className=\"p-8\">\n      <div className=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">Case Study</div>\n      <a href=\"#\" className=\"block mt-1 text-lg leading-tight font-medium text-black hover:underline\">Finding customers for your new business</a>\n      <p className=\"mt-2 text-gray-500\">Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first customers.</p>\n    </div>\n  </div>\n</div>\n```\n\nThis example demonstrates how Tailwind's responsive prefixes (md:) work. The layout changes on medium screens and above.\n\nTailwind also makes it easy to create responsive navigation bars:\n\n```jsx\n<nav className=\"bg-gray-800\">\n  <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n    <div className=\"flex items-center justify-between h-16\">\n      <div className=\"flex items-center\">\n        <div className=\"flex-shrink-0\">\n          <img className=\"h-8 w-8\" src=\"/logo.svg\" alt=\"Logo\" />\n        </div>\n        <div className=\"hidden md:block\">\n          <div className=\"ml-10 flex items-baseline space-x-4\">\n            <a href=\"#\" className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium\">Dashboard</a>\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">Team</a>\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">Projects</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</nav>\n```\n\nTailwind CSS has transformed the way many developers approach styling. It provides a powerful set of tools for building responsive, accessible, and customizable user interfaces without the overhead of traditional CSS frameworks.\n\nIf you haven't tried Tailwind yet, I highly recommend giving it a shot. It might just change the way you think about styling in web development.",
    author: "Priya Patel",
    date: "June 2, 2023",
    category: "CSS",
    readTime: "10 min read",
    image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "UI/UX Designer and Frontend Developer specializing in responsive design and CSS frameworks. 5+ years of experience creating beautiful, accessible web interfaces.",
    tags: ["CSS", "Tailwind", "Responsive Design", "Frontend"],
    comments: 18,
    likes: 132
  },
  {
    id: 3,
    title: "Introduction to Node.js and Express",
    intro: "Node.js has become one of the most popular technologies for building server-side applications. Combined with Express.js, it provides a powerful and flexible framework for web development.",
    content: "Node.js has become one of the most popular technologies for building server-side applications. Combined with Express.js, it provides a powerful and flexible framework for web development.\n\nNode.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside a web browser. It allows developers to use JavaScript to write command-line tools and for server-side scripting.\n\nExpress.js, on the other hand, is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. It simplifies the process of building web servers and APIs.\n\nLet's start with a basic Express server:\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\nThis simple server responds with \"Hello World!\" when you access the root URL.\n\nExpress makes it easy to define routes for different endpoints:\n\n```javascript\napp.get('/users', (req, res) => {\n  res.json([{ name: 'John' }, { name: 'Jane' }]);\n});\n\napp.post('/users', (req, res) => {\n  // Create a new user\n  res.status(201).send('User created');\n});\n```\n\nOne of the strengths of Express is its middleware system. Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application's request-response cycle.\n\nHere's an example of a simple logging middleware:\n\n```javascript\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.path}`);\n  next();\n});\n```\n\nExpress also supports template engines like EJS, Pug, and Handlebars, which allow you to generate HTML dynamically:\n\n```javascript\napp.set('view engine', 'ejs');\n\napp.get('/profile', (req, res) => {\n  res.render('profile', { name: 'John Doe' });\n});\n```\n\nWith the corresponding EJS template:\n\n```html\n<h1>Profile</h1>\n<p>Hello, <%= name %>!</p>\n```\n\nNode.js and Express have revolutionized backend development for JavaScript developers. They provide a unified language for both frontend and backend development, which can streamline the development process and reduce context switching.\n\nIf you're a JavaScript developer looking to get into backend development, learning Node.js and Express is a great place to start.",
    author: "Rajiv Kumar",
    date: "April 28, 2023",
    category: "Node.js",
    readTime: "12 min read",
    image: "https://images.unsplash.com/photo-1579468118864-1b9ea3c0db4a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1171&q=80",
    authorBio: "Full-stack developer with expertise in Node.js and JavaScript. 8+ years of experience building scalable backend systems and APIs for high-traffic applications.",
    tags: ["Node.js", "Express", "JavaScript", "Backend"],
    comments: 31,
    likes: 189
  },
  {
    id: 4,
    title: "Modern JavaScript: ES6+ Features",
    intro: "JavaScript has evolved significantly over the years, with ES6 (ECMAScript 2015) introducing many new features that have transformed how we write code. Let's explore some of these modern JavaScript features.",
    content: "JavaScript has evolved significantly over the years, with ES6 (ECMAScript 2015) introducing many new features that have transformed how we write code. Let's explore some of these modern JavaScript features.\n\nES6 introduced several key features that have become essential parts of modern JavaScript development:\n\n### 1. Arrow Functions\n\nArrow functions provide a more concise syntax for writing function expressions:\n\n```javascript\n// Traditional function\nfunction add(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst add = (a, b) => a + b;\n```\n\n### 2. Template Literals\n\nTemplate literals make it easier to create strings with variables and expressions:\n\n```javascript\nconst name = 'John';\nconst greeting = `Hello, ${name}!`;\n```\n\n### 3. Destructuring\n\nDestructuring allows you to extract values from arrays or objects into distinct variables:\n\n```javascript\n// Array destructuring\nconst [a, b] = [1, 2];\n\n// Object destructuring\nconst { name, age } = { name: 'John', age: 30 };\n```\n\n### 4. Default Parameters\n\nDefault parameters allow you to set default values for function parameters:\n\n```javascript\nfunction greet(name = 'Guest') {\n  return `Hello, ${name}!`;\n}\n```\n\n### 5. Rest and Spread Operators\n\nThe rest operator (...) allows you to represent an indefinite number of arguments as an array:\n\n```javascript\nfunction sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n```\n\nThe spread operator (...) allows you to expand an iterable into more elements:\n\n```javascript\nconst numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5];\n```\n\n### 6. Classes\n\nES6 introduced a more familiar syntax for creating objects and dealing with inheritance:\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    return `Hello, my name is ${this.name}`;\n  }\n}\n```\n\n### 7. Modules\n\nES6 introduced a native module system that allows you to export and import functions, objects, or primitives:\n\n```javascript\n// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\n// app.js\nimport { add, subtract } from './math.js';\n```\n\n### 8. Promises and Async/Await\n\nPromises provide a way to handle asynchronous operations more effectively:\n\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n```\n\nAsync/await builds on promises by making asynchronous code look and behave more like synchronous code:\n\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\nThese ES6+ features have made JavaScript more powerful, expressive, and easier to work with. They've become standard in modern JavaScript development, and understanding them is essential for any JavaScript developer.\n\nAs JavaScript continues to evolve, new features are being added regularly. Staying up-to-date with these changes will help you write more efficient, maintainable, and modern JavaScript code.",
    author: "Anita Desai",
    date: "July 10, 2023",
    category: "JavaScript",
    readTime: "15 min read",
    image: "https://images.unsplash.com/photo-1627398242454-45a1465c2479?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "JavaScript expert and frontend architect with 10+ years of experience. Passionate about modern JavaScript and teaching best practices to development teams.",
    tags: ["JavaScript", "ES6", "Web Development", "Programming"],
    comments: 42,
    likes: 215
  },
  {
    id: 5,
    title: "Database Design Best Practices",
    intro: "A well-designed database is crucial for the performance and scalability of any application. In this post, we'll explore some best practices for designing efficient and maintainable databases.",
    content: "A well-designed database is crucial for the performance and scalability of any application. In this post, we'll explore some best practices for designing efficient and maintainable databases.\n\n### 1. Understand Your Data\n\nBefore you start designing your database, it's essential to understand the data you'll be storing and how it will be used. Consider:\n\n- What types of data will you store?\n- How will the data be accessed and updated?\n- What are the relationships between different data entities?\n- What are the expected growth patterns?\n\n### 2. Normalize Your Data\n\nDatabase normalization is the process of organizing data to reduce redundancy and improve data integrity. The most common normal forms are:\n\n- **First Normal Form (1NF)**: Ensures that each column contains atomic values and that each record is unique.\n- **Second Normal Form (2NF)**: Builds on 1NF by removing partial dependencies.\n- **Third Normal Form (3NF)**: Builds on 2NF by removing transitive dependencies.\n\nWhile normalization is important, it's also essential to consider performance. Sometimes, denormalization can improve read performance by reducing the number of joins needed.\n\n### 3. Choose the Right Data Types\n\nSelecting appropriate data types for your columns is crucial for performance and storage efficiency. Consider:\n\n- Use the smallest data type that can accommodate your data.\n- Use fixed-length types when the data length is consistent.\n- Use variable-length types when the data length varies significantly.\n- Avoid using generic types like TEXT or BLOB when more specific types are available.\n\n### 4. Use Indexes Wisely\n\nIndexes can significantly improve query performance, but they come with trade-offs:\n\n- Indexes speed up read operations but slow down write operations.\n- Indexes consume additional storage space.\n- Too many indexes can degrade performance.\n\nCreate indexes on columns that are frequently used in WHERE clauses, JOIN conditions, and ORDER BY clauses. Avoid indexing columns that are rarely queried or updated frequently.\n\n### 5. Plan for Scalability\n\nDesign your database with scalability in mind:\n\n- Consider partitioning large tables to improve performance and manageability.\n- Use sharding to distribute data across multiple servers if needed.\n- Implement caching strategies to reduce database load.\n- Design for horizontal scaling when possible.\n\n### 6. Implement Security Measures\n\nDatabase security is critical:\n\n- Use the principle of least privilege when granting database access.\n- Encrypt sensitive data at rest and in transit.\n- Implement proper authentication and authorization mechanisms.\n- Regularly update and patch your database software.\n- Use parameterized queries or prepared statements to prevent SQL injection attacks.\n\n### 7. Document Your Design\n\nProper documentation is essential for maintaining your database over time:\n\n- Create an entity-relationship diagram (ERD) to visualize the database structure.\n- Document the purpose of each table and column.\n- Explain any complex relationships or constraints.\n- Keep the documentation up to date as the database evolves.\n\n### 8. Test Your Design\n\nBefore deploying your database, test it thoroughly:\n\n- Perform load testing to ensure it can handle expected traffic.\n- Test backup and recovery procedures.\n- Verify that all constraints and relationships work as expected.\n- Test with realistic data volumes to identify potential performance issues.\n\n### Example: User and Post Tables\n\nLet's look at a simple example of well-designed tables for a blog application:\n\n```sql\nCREATE TABLE users (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\nCREATE TABLE posts (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    content TEXT NOT NULL,\n    author_id INT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n    FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE\n);\n```\n\nIn this example:\n- Each table has a primary key (id).\n- The posts table has a foreign key (author_id) that references the users table.\n- We've defined appropriate data types for each column.\n- We've added timestamps for tracking when records are created and updated.\n- The ON DELETE CASCADE clause ensures that when a user is deleted, all their posts are also deleted.\n\nBy following these best practices, you can design databases that are efficient, scalable, and maintainable. A well-designed database will serve as a solid foundation for your application, supporting its growth and evolution over time.",
    author: "Vikram Singh",
    date: "March 22, 2023",
    category: "Database",
    readTime: "18 min read",
    image: "https://images.unsplash.com/photo-1544383825-9d2992d7e043?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "Database architect with 12+ years of experience designing and optimizing database systems for enterprise applications. Specializes in PostgreSQL, MySQL, and NoSQL databases.",
    tags: ["Database", "SQL", "PostgreSQL", "Design"],
    comments: 28,
    likes: 167
  },
  {
    id: 6,
    title: "Building RESTful APIs with Node.js",
    intro: "RESTful APIs are the backbone of modern web applications, enabling communication between clients and servers. In this post, we'll explore how to build robust RESTful APIs using Node.js and Express.",
    content: "RESTful APIs are the backbone of modern web applications, enabling communication between clients and servers. In this post, we'll explore how to build robust RESTful APIs using Node.js and Express.\n\n### What is a RESTful API?\n\nREST (Representational State Transfer) is an architectural style for designing networked applications. A RESTful API is one that adheres to the principles of REST, which include:\n\n- **Stateless**: Each request from a client to a server must contain all the information needed to understand and process the request.\n- **Client-Server Architecture**: The client and server are separate concerns that interact through a uniform interface.\n- **Cacheable**: Responses must define themselves as cacheable or not to prevent clients from reusing stale or inappropriate data.\n- **Uniform Interface**: Resources are identified by URIs, and interactions with resources are done using standard HTTP methods.\n\n### Setting Up Your Project\n\nFirst, let's set up a new Node.js project and install the necessary dependencies:\n\n```bash\nmkdir restful-api\ncd restful-api\nnpm init -y\nnpm install express mongoose body-parser cors dotenv\n```\n\n### Creating a Basic Express Server\n\nCreate a file named `server.js` and set up a basic Express server:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(cors());\napp.use(bodyParser.json());\n\n// Routes\napp.get('/', (req, res) => {\n  res.send('Welcome to the RESTful API!');\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n### Connecting to MongoDB\n\nWe'll use Mongoose to interact with MongoDB. Create a file named `db.js` to handle the database connection:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('MongoDB connected');\n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error.message);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n```\n\nUpdate `server.js` to connect to the database:\n\n```javascript\nconst connectDB = require('./db');\n\n// Connect to database\nconnectDB();\n```\n\n### Creating a Mongoose Model\n\nLet's create a model for a blog post. Create a file named `models/Post.js`:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst PostSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  content: {\n    type: String,\n    required: true,\n  },\n  author: {\n    type: String,\n    required: true,\n  },\n  tags: [String],\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nmodule.exports = mongoose.model('Post', PostSchema);\n```\n\n### Creating CRUD Routes\n\nNow, let's create routes for CRUD (Create, Read, Update, Delete) operations. Create a file named `routes/posts.js`:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst Post = require('../models/Post');\n\n// Get all posts\nrouter.get('/', async (req, res) => {\n  try {\n    const posts = await Post.find();\n    res.json(posts);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Get a single post\nrouter.get('/:id', async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n    res.json(post);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Create a new post\nrouter.post('/', async (req, res) => {\n  const post = new Post({\n    title: req.body.title,\n    content: req.body.content,\n    author: req.body.author,\n    tags: req.body.tags,\n  });\n\n  try {\n    const newPost = await post.save();\n    res.status(201).json(newPost);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n// Update a post\nrouter.put('/:id', async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    post.title = req.body.title || post.title;\n    post.content = req.body.content || post.content;\n    post.author = req.body.author || post.author;\n    post.tags = req.body.tags || post.tags;\n\n    const updatedPost = await post.save();\n    res.json(updatedPost);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n// Delete a post\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n    if (!post) {\n      return res.status(404).json({ message: 'Post not found' });\n    }\n\n    await post.remove();\n    res.json({ message: 'Post deleted' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\nmodule.exports = router;\n```\n\n### Registering the Routes\n\nUpdate `server.js` to use the posts routes:\n\n```javascript\nconst postsRouter = require('./routes/posts');\n\n// Use routes\napp.use('/api/posts', postsRouter);\n```\n\n### Adding Input Validation\n\nInput validation is crucial for API security and data integrity. Let's add validation using the `express-validator` middleware:\n\n```bash\nnpm install express-validator\n```\n\nUpdate `routes/posts.js` to include validation:\n\n```javascript\nconst { body, validationResult } = require('express-validator');\n\n// Create a new post with validation\nrouter.post('/',\n  [\n    body('title').notEmpty().withMessage('Title is required'),\n    body('content').notEmpty().withMessage('Content is required'),\n    body('author').notEmpty().withMessage('Author is required'),\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const post = new Post({\n      title: req.body.title,\n      content: req.body.content,\n      author: req.body.author,\n      tags: req.body.tags,\n    });\n\n    try {\n      const newPost = await post.save();\n      res.status(201).json(newPost);\n    } catch (error) {\n      res.status(400).json({ message: error.message });\n    }\n  }\n);\n```\n\n### Adding Error Handling Middleware\n\nCreate a middleware to handle errors consistently. Add this to `server.js`:\n\n```javascript\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ message: 'Something went wrong!' });\n});\n```\n\n### Testing Your API\n\nYou can test your API using tools like Postman or Insomnia. Here are some example requests:\n\n**Get all posts:**\n```\nGET http://localhost:3000/api/posts\n```\n\n**Get a single post:**\n```\nGET http://localhost:3000/api/posts/123\n```\n\n**Create a new post:**\n```\nPOST http://localhost:3000/api/posts\nContent-Type: application/json\n\n{\n  \"title\": \"My First Post\",\n  \"content\": \"This is the content of my first post\",\n  \"author\": \"John Doe\",\n  \"tags\": [\"intro\", \"first\"]\n}\n```\n\n**Update a post:**\n```\nPUT http://localhost:3000/api/posts/123\nContent-Type: application/json\n\n{\n  \"title\": \"Updated Title\",\n  \"content\": \"Updated content\"\n}\n```\n\n**Delete a post:**\n```\nDELETE http://localhost:3000/api/posts/123\n```\n\n### Best Practices for RESTful APIs\n\nHere are some best practices to keep in mind when building RESTful APIs:\n\n1. **Use HTTP Methods Appropriately**:\n   - GET: Retrieve resources\n   - POST: Create new resources\n   - PUT/PATCH: Update resources\n   - DELETE: Remove resources\n\n2. **Use Proper Status Codes**:\n   - 200 OK: Successful GET, PUT, or PATCH\n   - 201 Created: Successful POST\n   - 204 No Content: Successful DELETE\n   - 400 Bad Request: Invalid request\n   - 401 Unauthorized: Authentication failed\n   - 403 Forbidden: Authorization failed\n   - 404 Not Found: Resource not found\n   - 500 Internal Server Error: Server error\n\n3. **Version Your API**: Include the version in the URL (e.g., `/api/v1/posts`) to allow for future changes without breaking existing clients.\n\n4. **Use Pagination**: For endpoints that return large collections, implement pagination to limit the amount of data returned.\n\n5. **Implement Rate Limiting**: Protect your API from abuse by limiting the number of requests a client can make in a given time period.\n\n6. **Use HTTPS**: Always use HTTPS to encrypt data in transit.\n\n7. **Document Your API**: Provide clear documentation for your API, including available endpoints, parameters, and response formats.\n\nBy following these practices and using the tools we've discussed, you can build robust, scalable, and maintainable RESTful APIs with Node.js and Express.",
    author: "Amit Verma",
    date: "June 18, 2023",
    category: "API",
    readTime: "20 min read",
    image: "https://images.unsplash.com/photo-1558494949-ef010cbdcc31?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "Backend developer specializing in API design and microservices architecture. 9+ years of experience building scalable APIs for enterprise applications and startups.",
    tags: ["API", "Node.js", "Express", "REST"],
    comments: 37,
    likes: 201
  },
  {
    id: 7,
    title: "Introduction to Docker for Developers",
    intro: "Docker has revolutionized how developers build, ship, and run applications. In this post, we'll explore the basics of Docker and how it can streamline your development workflow.",
    content: "Docker has revolutionized how developers build, ship, and run applications. In this post, we'll explore the basics of Docker and how it can streamline your development workflow.\n\n### What is Docker?\n\nDocker is an open platform for developing, shipping, and running applications in containers. Containers allow you to package an application with all of its dependencies into a standardized unit for software development.\n\n### Why Use Docker?\n\nDocker offers several benefits for developers:\n\n1. **Consistency**: Docker ensures that your application runs the same way in development, testing, and production environments.\n2. **Isolation**: Containers are isolated from each other and from the host system, reducing conflicts between dependencies.\n3. **Portability**: Docker containers can run on any system that has Docker installed, regardless of the underlying operating system.\n4. **Scalability**: Docker makes it easy to scale applications horizontally by running multiple containers.\n5. **Efficiency**: Containers share the host system's kernel, making them more lightweight than traditional virtual machines.\n\n### Docker Concepts\n\nBefore diving into Docker, it's important to understand some key concepts:\n\n1. **Image**: A read-only template with instructions for creating a Docker container. An image is like a blueprint for a container.\n2. **Container**: A runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI.\n3. **Dockerfile**: A text document that contains all the commands a user could call on the command line to assemble an image.\n4. **Registry**: A storage and distribution system for named Docker images. The default registry is Docker Hub.\n\n### Installing Docker\n\nTo get started with Docker, you'll need to install it on your system. Docker is available for Windows, macOS, and Linux distributions. Visit the official Docker website for installation instructions specific to your operating system.\n\n### Your First Docker Container\n\nLet's run your first Docker container using the official Nginx image:\n\n```bash\ndocker run -d -p 8080:80 nginx\n```\n\nThis command does the following:\n- `docker run`: Creates and starts a container\n- `-d`: Runs the container in detached mode (in the background)\n- `-p 8080:80`: Maps port 8080 on the host to port 80 in the container\n- `nginx`: The image to use for the container\n\nAfter running this command, you can access the Nginx welcome page by navigating to `http://localhost:8080` in your browser.\n\n### Creating a Dockerfile\n\nTo containerize your own application, you'll need to create a Dockerfile. Let's create a Dockerfile for a simple Node.js application:\n\n```dockerfile\n# Use an official Node.js runtime as the base image\nFROM node:14\n\n# Set the working directory in the container\nWORKDIR /usr/src/app\n\n# Copy package.json and package-lock.json\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm install\n\n# Copy the rest of the application code\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 3000\n\n# Define the command to run the application\nCMD [ \"node\", \"app.js\" ]\n```\n\n### Building an Image\n\nOnce you have a Dockerfile, you can build an image using the `docker build` command:\n\n```bash\ndocker build -t my-node-app .\n```\n\nThis command builds an image with the tag `my-node-app` using the Dockerfile in the current directory.\n\n### Running Your Custom Image\n\nTo run a container from your custom image:\n\n```bash\ndocker run -d -p 3000:3000 my-node-app\n```\n\n### Managing Containers\n\nDocker provides several commands for managing containers:\n\n```bash\n# List running containers\ndocker ps\n\n# List all containers (including stopped ones)\ndocker ps -a\n\n# Stop a container\ndocker stop <container-id>\n\n# Start a stopped container\ndocker start <container-id>\n\n# Remove a container\ndocker rm <container-id>\n```\n\n### Docker Compose\n\nDocker Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application's services.\n\nHere's an example `docker-compose.yml` file for a web application with a database:\n\n```yaml\nversion: '3'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/mydb\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=mydb\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n\nvolumes:\n  postgres-data:\n```\n\nTo start the application with Docker Compose:\n\n```bash\ndocker-compose up -d\n```\n\n### Best Practices for Docker\n\nHere are some best practices to keep in mind when working with Docker:\n\n1. **Use Multi-Stage Builds**: Multi-stage builds allow you to create smaller images by separating the build environment from the runtime environment.\n\n2. **Minimize Layers**: Each command in a Dockerfile creates a new layer. Minimize the number of layers by combining related commands.\n\n3. **Use a .dockerignore File**: Similar to .gitignore, a .dockerignore file prevents unnecessary files from being included in the build context.\n\n4. **Don't Run as Root**: For security reasons, avoid running containers as the root user. Create a dedicated user and group for your application.\n\n5. **Use Specific Tags**: When using base images, avoid using the `latest` tag. Instead, use specific version tags to ensure consistency.\n\n6. **Scan Images for Vulnerabilities**: Regularly scan your Docker images for security vulnerabilities using tools like Docker Scout or third-party scanners.\n\n### Conclusion\n\nDocker has become an essential tool for modern software development. By containerizing your applications, you can ensure consistency across environments, simplify deployment, and improve resource utilization.\n\nAs you continue your Docker journey, explore more advanced topics like orchestration with Kubernetes, networking, security, and monitoring. Docker's ecosystem is vast and constantly evolving, offering solutions for a wide range of use cases.\n\nBy incorporating Docker into your development workflow, you'll be able to build more reliable, portable, and scalable applications.",
    author: "Neha Gupta",
    date: "August 5, 2023",
    category: "DevOps",
    readTime: "16 min read",
    image: "https://images.unsplash.com/photo-1605738414575-4aed9286a401?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "DevOps engineer with 7+ years of experience in containerization and cloud infrastructure. Passionate about automating deployment pipelines and optimizing development workflows.",
    tags: ["Docker", "DevOps", "Containerization", "Cloud"],
    comments: 29,
    likes: 178
  },
  {
    id: 8,
    title: "Building a Responsive UI with React and Tailwind CSS",
    intro: "Creating responsive user interfaces is essential for modern web applications. In this post, we'll explore how to build responsive UIs using React and Tailwind CSS.",
    content: "Creating responsive user interfaces is essential for modern web applications. In this post, we'll explore how to build responsive UIs using React and Tailwind CSS.\n\n### Why Responsive Design Matters\n\nWith the variety of devices and screen sizes available today, it's crucial that your web applications look and function well on all of them. Responsive design ensures that your UI adapts to different screen sizes, providing an optimal viewing experience for your users.\n\n### Setting Up Your Project\n\nFirst, let's set up a new React project and install Tailwind CSS:\n\n```bash\nnpx create-react-app responsive-ui\ncd responsive-ui\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\nNext, configure Tailwind by updating the `tailwind.config.js` file:\n\n```javascript\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nThen, add the Tailwind directives to your `src/index.css` file:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n### Responsive Design with Tailwind\n\nTailwind CSS provides a mobile-first approach to responsive design. It includes breakpoints that correspond to common device sizes:\n\n- `sm:` (640px) - Small screens\n- `md:` (768px) - Medium screens\n- `lg:` (1024px) - Large screens\n- `xl:` (1280px) - Extra large screens\n- `2xl:` (1536px) - 2X large screens\n\nYou can use these breakpoints to apply different styles at different screen sizes:\n\n```jsx\n<div className=\"text-sm md:text-base lg:text-lg xl:text-xl\">\n  This text changes size based on the screen width.\n</div>\n```\n\n### Creating a Responsive Navbar\n\nLet's create a responsive navbar that collapses on smaller screens:\n\n```jsx\nimport React, { useState } from 'react';\n\nconst Navbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <nav className=\"bg-gray-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-white font-bold\">Logo</span>\n            </div>\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">Home</a>\n                <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">About</a>\n                <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">Services</a>\n                <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\">Contact</a>\n              </div>\n            </div>\n          </div>\n          <div className=\"-mr-2 flex md:hidden\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none\"\n            >\n              <svg className=\"h-6 w-6\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 24 24\">\n                {isOpen ? (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                ) : (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\n                )}\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {isOpen && (\n        <div className=\"md:hidden\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\">Home</a>\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\">About</a>\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\">Services</a>\n            <a href=\"#\" className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\">Contact</a>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default Navbar;\n```\n\n### Creating a Responsive Card Grid\n\nLet's create a responsive grid of cards that adjusts the number of columns based on the screen size:\n\n```jsx\nimport React from 'react';\n\nconst CardGrid = () => {\n  const cards = [\n    { title: 'Card 1', content: 'This is the content for card 1' },\n    { title: 'Card 2', content: 'This is the content for card 2' },\n    { title: 'Card 3', content: 'This is the content for card 3' },\n    { title: 'Card 4', content: 'This is the content for card 4' },\n    { title: 'Card 5', content: 'This is the content for card 5' },\n    { title: 'Card 6', content: 'This is the content for card 6' },\n  ];\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {cards.map((card, index) => (\n          <div key={index} className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{card.title}</h3>\n              <p className=\"text-gray-600\">{card.content}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CardGrid;\n```\n\n### Creating a Responsive Layout with Flexbox and Grid\n\nTailwind CSS provides utilities for both Flexbox and Grid layouts. Let's create a responsive layout using both:\n\n```jsx\nimport React from 'react';\n\nconst ResponsiveLayout = () => {\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"flex flex-col md:flex-row gap-8\">\n        {/* Sidebar */}\n        <div className=\"w-full md:w-1/4\">\n          <div className=\"bg-gray-100 p-6 rounded-lg\">\n            <h2 className=\"text-lg font-medium text-gray-900 mb-4\">Sidebar</h2>\n            <ul className=\"space-y-2\">\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 1</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 2</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 3</a></li>\n              <li><a href=\"#\" className=\"text-gray-600 hover:text-gray-900\">Link 4</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        {/* Main Content */}\n        <div className=\"w-full md:w-3/4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Content Block 1</h3>\n              <p className=\"text-gray-600\">This is the content for block 1. It demonstrates how to create a responsive layout using Flexbox and Grid.</p>\n            </div>\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Content Block 2</h3>\n              <p className=\"text-gray-600\">This is the content for block 2. It demonstrates how to create a responsive layout using Flexbox and Grid.</p>\n            </div>\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Content Block 3</h3>\n              <p className=\"text-gray-600\">This is the content for block 3. It demonstrates how to create a responsive layout using Flexbox and Grid.</p>\n            </div>\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Content Block 4</h3>\n              <p className=\"text-gray-600\">This is the content for block 4. It demonstrates how to create a responsive layout using Flexbox and Grid.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResponsiveLayout;\n```\n\n### Creating a Responsive Form\n\nLet's create a responsive form that adjusts its layout based on the screen size:\n\n```jsx\nimport React, { useState } from 'react';\n\nconst ResponsiveForm = () => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: '',\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(formData);\n    // Form submission logic here\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <div className=\"max-w-3xl mx-auto\">\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <div className=\"px-6 py-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Contact Us</h2>\n            <form onSubmit={handleSubmit}>\n              <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">Name</label>\n                  <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                  <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"mt-6\">\n                <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-1\">Message</label>\n                <textarea\n                  id=\"message\"\n                  name=\"message\"\n                  rows={4}\n                  value={formData.message}\n                  onChange={handleChange}\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                ></textarea>\n              </div>\n              <div className=\"mt-6\">\n                <button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\"\n                >\n                  Send Message\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResponsiveForm;\n```\n\n### Best Practices for Responsive Design\n\nHere are some best practices to keep in mind when building responsive UIs:\n\n1. **Mobile-First Approach**: Start designing for the smallest screen size and then progressively enhance the design for larger screens.\n\n2. **Use Relative Units**: Use relative units like percentages, em, or rem instead of fixed units like pixels for sizing elements.\n\n3. **Optimize Images**: Use responsive images with the `srcset` attribute to serve different image sizes based on the device's screen size and resolution.\n\n4. **Test on Real Devices**: While browser dev tools are helpful, testing on actual devices provides the most accurate representation of how your UI will look and feel.\n\n5. **Consider Touch Targets**: Make sure buttons and other interactive elements are large enough to be easily tapped on touch devices.\n\n6. **Use Conditional Loading**: Load only the necessary resources for each device to improve performance.\n\n### Conclusion\n\nBuilding responsive user interfaces is essential for modern web applications. With React and Tailwind CSS, you have a powerful combination for creating UIs that look and function well on all devices.\n\nBy leveraging Tailwind's responsive utilities and React's component-based architecture, you can create flexible, maintainable, and responsive designs with ease. As you continue to build responsive UIs, remember to test thoroughly and keep the user experience at the forefront of your design decisions.",
    author: "Rahul Mehta",
    date: "September 12, 2023",
    category: "UI/UX",
    readTime: "14 min read",
    image: "https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    authorBio: "Frontend developer and UI/UX designer with 6+ years of experience creating responsive web applications. Passionate about accessibility and user-centered design.",
    tags: ["React", "Tailwind", "Responsive Design", "UI/UX"],
    comments: 33,
    likes: 195
  }
];